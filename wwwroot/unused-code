 // {
        //   buttonName: "Hide Body After Selecting",
        //   buttonFunction: () => {
        //     const body = viewer.getSelection([10]);
        //     viewer.hide(body);
        //   },
        // },
        // {
        //   buttonName: "Show All Hidden Nodes",
        //   buttonFunction: () => {
        //     viewer.showAll();
        //   },
        // },
        // {
        //   buttonName: "Hide All Nodes",
        //   buttonFunction: () => {
        //     viewer.hideAll();
        //   },
        // },

        // {
        //   buttonName: "Get Instance Tree",
        //   buttonFunction: () => {
        //     const tree = viewer.model.getInstanceTree();
        //     console.log(tree);
        //   },
        // },
        // {
        //   buttonName: "Get Fragment List",
        //   buttonFunction: () => {
        //     const frags = viewer.model.getFragmentList();
        //     console.log(frags);
        //   },
        // },
        // {
        //   buttonName: "Get Frag's World Bounds",
        //   buttonFunction: () => {
        //     let bbox = new THREE.Box3();
        //     const frags = viewer.model.getFragmentList();
        //     frags.getWorldBounds(1, bbox);
        //     console.log(`World Bounds:`, JSON.stringify(bbox));
        //   },
        // },
        // {
        //   buttonName: "Get Properties",
        //   buttonFunction: () => {
        //     const props = viewer.model.getProperties([1]);
        //     console.log(props);
        //   },
        // },
        // {
        //   buttonName: "Get Proxy",
        //   buttonFunction: () => {
        //     const getProxy = viewer.impl.getRenderProxy(viewer.model, 1);
        //     console.log(getProxy);
        //   },
        // },

        // {
        //   buttonName: "Isolate Bracket",
        //   buttonFunction: () => {
        //     viewer.search("Bracket, Bottom", (ids) => {
        //       viewer.isolate(ids);
        //     });
        //   },
        // },

         // {
        //   buttonName: "Isolate Pivot Swingarm",
        //   buttonFunction: () => {
        //     viewer.select([8]);
        //   },
        // },
        // {
        //   buttonName: "Change Color of Carbon Layup to Red",
        //   buttonFunction: () => {
        //     viewer.search("Carbon Layup", (ids) => {
        //       viewer.setThemingColor(10, new THREE.Vector4(0xff0000));
        //     });
        //   },
        // },
        // {
        //   buttonName: "Change Color of Carbon Layup to Grey",
        //   buttonFunction: () => {
        //     const grey = new THREE.Vector4(0.5, 0.5, 0.5);
        //     viewer.setThemingColor(10, grey);
        //   },
        // },
        // {
        //   buttonName: "Isolate Seat Tube",
        //   buttonFunction: () => {
        //     viewer.search("Seat Tube", (ids) => {
        //       viewer.isolate(ids);
        //       console.log(ids); //[9]
        //     });
        //   },
        // },
        // {
        //   buttonName: "Isolate Swingarm",
        //   buttonFunction: () => {
        //     viewer.search("Swingarm - Weldment", (ids) => {
        //       viewer.isolate(ids);
        //       console.log(ids); //11
        //     });
        //   },
        // },
        // {
        //   buttonName: "Isolate Manitou Metal",
        //   buttonFunction: () => {
        //     viewer.search("Manitou Metal", (ids) => {
        //       viewer.isolate(ids);
        //       console.log(ids);
        //     });
        //   },
        // },

        // const colorsArray = [
      //   {
      //     color: "white",
      //     colorCode: "#FFFFFF",
      //   },
      //   {
      //     color: "red",
      //     colorCode: "0xff0000",
      //   },
      //   {
      //     color: "grey",
      //     colorCode: "0, 0, 0, 210, 210, 210",
      //   },
      //   {
      //     color: "blue",
      //     colorCode: "0x0000ff",
      //   },
      // ];
      // const dropdown = document.querySelector("select[name='colors']");
      // dropdown.innerHTML = colorsArray.map(
      //   (backgroundColor, idx) =>
      //     `<option value="${backgroundColor.colorCode}">${backgroundColor.color}</option>`
      // );
      // dropdown.onchange = () => {
      //   viewer.setBackgroundColor(dropdown.value);
      // };

      //create a new dropdown menu
      //RGBA color codes = red, green, blue, opacity